// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


enum Gender {
  male
  female
}

enum Role {
  user
  organizer
}

enum StockStatus { 
  available
  soldout
}

model User {
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  email String @unique
  password String
  role Role? @default(user)
  gender Gender? 
  avatarUrl String? @db.VarChar(255)
  isVerified Boolean @default(false)
  referralCode String @default(uuid())
  phoneNumber String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  events Event []
  transactions Transaction[]
  tickets Ticket []
  categories Category[]
  points Point[]
  eventdashboards EventDashboard[]
  coupons Coupon []
}

model Event {
  id Int @id @default(autoincrement())
  eventName String
  description String @db.Text
  price Decimal @db.Decimal(18,2)
  eventDate DateTime
  location String
  image_url String? @db.VarChar(255)
  userId Int
  user   User  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tickets Ticket[]
  reviews Review[]
  promotions Promotion []
  eventDashboards EventDashboard[]
}

model Ticket {
  id Int @id @default(autoincrement())
  eventId Int
  userId Int
  price Decimal
  Stock Int
  orderDate DateTime @default(now())
  transactions Transaction[]
  stocks Stock[]
  ticket_category Ticket_Category[]
  event Event @relation(fields: [eventId], references: [id])
  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Category {
  id Int @id @default(autoincrement())
  categoryName String
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ticket_category Ticket_Category[]
}

model Ticket_Category {
  ticketId Int
  categoryId Int
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  category Category @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@id([ticketId,categoryId])
}

model Stock {
  id Int @id @default(autoincrement())
  ticketId Int
  stock_qty Decimal
  stockstatus StockStatus?
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Transaction {
  id Int @id @default(autoincrement())
  userId Int
  ticketId Int
  totalTicket Int
  totalPrice Float
  buyingMethod String
  transactionDate DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  ticket Ticket @relation(fields: [ticketId], references: [id])
}

model Promotion {
  id Int  @id @default(autoincrement())
  eventId Int
  discountCoupon String
  startDate DateTime @default(now())
  endDate DateTime @default(now())
  event Event @relation(fields: [eventId], references: [id])
}

model Coupon {
  id            Int       @id @default(autoincrement())
  code          String    @unique
  discountValue Decimal   @db.Decimal(18,2)
  expiryDate    DateTime
  usageCount    Int       @default(0)
  maxUsage      Int       @default(1)
  isActive      Boolean   @default(true)
  userId        Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  user          User?     @relation(fields: [userId], references: [id])
}


model Point {
  id Int @id @default(autoincrement())
  userId Int
  points Int @default(0)
  createdAt DateTime @default(now())
  expiredAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
}

model Review {
  id Int @id @default(autoincrement())
  eventId Int
  rating Int
  comment String
  createdAt DateTime @default(now())
  event Event @relation(fields: [eventId], references: [id])
}

model EventDashboard {
  id Int @id @default(autoincrement())
  eventId Int
  userId Int
  registrations Int
  transactions  Int
  year Int
  month Int
  day Int
  event Event @relation(fields:[eventId], references:[id])
  user User @relation(fields: [userId], references: [id])
}